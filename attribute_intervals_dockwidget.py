# -*- coding: utf-8 -*-
"""
/***************************************************************************
 AttributeIntervalsDockWidget
                                 A QGIS plugin
 This plugin detects intervals of consecutive values
 Generated by Plugin Builder: http://g-sherman.github.io/Qgis-Plugin-Builder/
                             -------------------
        begin                : 2021-07-22
        git sha              : $Format:%H$
        copyright            : (C) 2021 by Georgii Savelev
        email                : bassetranquille@gmail.com
 ***************************************************************************/

/***************************************************************************
 *                                                                         *
 *   This program is free software; you can redistribute it and/or modify  *
 *   it under the terms of the GNU General Public License as published by  *
 *   the Free Software Foundation; either version 2 of the License, or     *
 *   (at your option) any later version.                                   *
 *                                                                         *
 ***************************************************************************/
"""

import os

from qgis.PyQt import QtWidgets, uic
from PyQt5.QtWidgets import QMessageBox
from qgis.PyQt.QtCore import pyqtSignal
from qgis.core import QgsMapLayerProxyModel
from qgis.utils import iface
from .list_to_interval import intervals

FORM_CLASS, _ = uic.loadUiType(os.path.join(
    os.path.dirname(__file__), 'attribute_intervals_dockwidget_base.ui'))


class AttributeIntervalsDockWidget(QtWidgets.QDockWidget, FORM_CLASS):

    closingPlugin = pyqtSignal()

    def __init__(self, parent=None):
        """Constructor."""
        super(AttributeIntervalsDockWidget, self).__init__(parent)
        # Set up the user interface from Designer.
        # After setupUI you can access any designer object by doing
        # self.<objectname>, and you can use autoconnect slots - see
        # http://doc.qt.io/qt-5/designer-using-a-ui-file.html
        # #widgets-and-dialogs-with-auto-connect
        self.setupUi(self)

        #input layer and field setting up
        self.inputMapLayerComboBox.setFilters(QgsMapLayerProxyModel.VectorLayer)
        self.inputMapLayerComboBox.setShowCrs(True)
        self.inputMapLayerComboBox.currentIndexChanged.connect(lambda:
                                                              self.inputFieldComboBox.setLayer(self.inputMapLayerComboBox.currentLayer())
                                                              )
        
        self.getValuePushButton.clicked.connect(self.calculatePrefix)

        #tie up active layer with the input layer for the tool
        self.inputMapLayerComboBox.setLayer(iface.activeLayer())
        iface.layerTreeView().currentLayerChanged.connect(lambda:
                                                         self.inputMapLayerComboBox.setLayer(iface.activeLayer())
                                                         )

        self.clearPushButton.clicked.connect(lambda:
                                            self.prefixLineEdit.clear()
                                            )

        self.calculatePushButton.clicked.connect(self.calculateIntervals)

    def calculatePrefix(self):
        mainlayer = self.inputMapLayerComboBox.currentLayer()
        attr = self.inputFieldComboBox.currentField()
        feats = mainlayer.getFeatures()
        self.prefixLineEdit.setText(str([feat.attribute(attr) for feat in feats][0]))

    def calculateIntervals(self):

        attr = self.inputFieldComboBox.currentField()
        mainlayer = self.inputMapLayerComboBox.currentLayer()

        #if some features are selected, work with them
        if mainlayer.selectedFeatureCount() == 0:
            selection = mainlayer.getFeatures()
        else:
            selection = mainlayer.selectedFeatures()

        num_data = []
        text_data = []
        prefix = self.prefixLineEdit.text()
        for feat in selection:
            feat_attr = feat[attr]
            if (prefix or prefix == 0) and prefix in str(feat_attr):
                feat_attr = feat_attr.split(prefix)[1]

            if feat_attr or feat_attr == 0:
                if str(feat_attr).isdigit():
                    num_data.append(int(feat_attr))
                else:
                    text_data.append(feat_attr)

        if len(num_data) > 0:
            data_intervals = intervals(num_data)
        else:
            data_intervals = ''
        data = data_intervals

        if len(data) > 0 and len(text_data) > 0:
            data += ', '

        if len(text_data) > 0:
            data += ', '.join(sorted(list(set(text_data))))
        intervals_number = len(data.split(","))

        if len(data) > 0:
            msgbox = QtWidgets.QMessageBox(
                                       QMessageBox.Information, 'Intervals',
                                       f'{intervals_number} interval{"s" if intervals_number > 1 else ""} in {attr}s:' \
                                       + f'\n{data}')
            msgbox.exec_()
        else:
            msgbox = QtWidgets.QMessageBox(
                                       QMessageBox.Information, 'Intervals',
                                       'No intervals found')
            msgbox.exec_()

    def closeEvent(self, event):
        self.closingPlugin.emit()
        event.accept()
